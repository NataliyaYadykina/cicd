image: busybox:latest 

stages:
  - build
  - test
  - deploy
  - stop
  - stop previous jobs

variables:
  IMAGE_TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  # CI_DEBUG_TRACE: "true"

include:
  - local: smoke.gitlab-ci.yml
  - remote: 'https://gitlab.com/ny7321711/ny_gb/-/raw/main/.gitlab-ci.yml'

cache:
  key:
    files:
      - composer.lock
  paths:
    - vendor/

build1:
  stage: build
  script:
    # - sleep 60
    - echo "Do your build here"
    - echo one >> file1.txt
    - echo two >> file2.txt
    - mkdir -p vendor/
    - echo "build" > vendor/hello.txt
  artifacts:
    paths:
      - file1.txt
  

docker build:
# Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u $GITLAB_CI_USER -p $GITLAB_CI_PASSWORD $CI_REGISTRY
    - echo $GITLAB_CI_USER $GITLAB_CI_PASSWORD $CI_REGISTRY $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - echo "Hello from docker!" > from_docker.txt
  artifacts:
    paths:
      - from_docker.txt

test1:
  stage: test
  script:
    - echo "Do a test here"
    - echo "For example run a test suite"
    - cat vendor/hello.txt
    - cat from_docker.txt
    # - grep one file1.txt
    # - sleep 6
  # resource_group: phone

test2:
  stage: test
  script:
    - echo "Do another parallel test here"
    - echo "For example run a lint test"
    # - grep two file2.txt

deploy to stage:
  stage: deploy
  variables:
    TARGET_ENV: staging
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
  only:
    - main
  environment:
    name: staging
    on_stop: stop to staging
    auto_stop_in: 1 day

deploy to preprod:
  stage: deploy
  variables:
    TARGET_ENV: preprod
    MyLogin: "someLogin_preprod"
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo "$MyLogin"
    - echo password ${MyPassword}
  only:
    - main
  # when: manual
  environment:
    name: preprod

deploy to production:
  stage: deploy
  variables:
    TARGET_ENV: production
    MyLogin: "someLogin_production"
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo "$MyLogin"
    - echo password ${MyPassword}
  only:
    - main
  # when: manual
  environment:
    name: production

stop to staging:
  stage: stop
  variables:
    TARGET_ENV: staging
  script:
    - echo "STOP ${TARGET_ENV}"
  only:
    - main
  when: manual
  environment:
    name: staging
    action: stop

deploy to prod:
  stage: deploy
  variables:
    TARGET_ENV: prod
  script:
    - echo "Do you deploy here to ${TARGET_ENV}"
    - echo ${DB_SERVER}
  only:
    - main
  when: manual
  environment:
    name: prod

cancel:
  stage: stop previous jobs
  image: everpeace/curl-jq
  script:
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]
        then
          (
            echo "Cancel old pipelines from the same branch except last"
            OLD_PIPELINES=$( curl -s -H "PRIVATE-TOKEN: $CICD_GB_HW3_RUNNER_TOKEN" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/pipelines?ref=${CI_COMMIT_REF_NAME}&status=running" \
            | jq '.[] | .id' | tail -n +2 )
            for pipeline in ${OLD_PIPELINES}; \
                do echo "Killing ${pipeline}" && \
                  curl -s --request POST -H "PRIVATE-TOKEN: $CICD_GB_HW3_RUNNER_TOKEN" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/pipelines/${pipeline}/cancel"; done
          ) || echo "Canceling old pipelines (${OLD_PIPELINES}) failed"
      fi

# pages:
#   stage: deploy
#   script:
#     - mkdir -p public
#     - cp file1.txt public/index.html
#     - echo 404 >> public/404.html
#   artifacts:
#     exclude:
#       - public/404.html
#     paths:
#       - public
#   only:
#     - main
